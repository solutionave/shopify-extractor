// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SheetProduct {
  id            Int     @id @default(autoincrement())
  Title         String?
  ProductLink   String?
  ImageLink     String?
  AffiliateLink String?
}

model ShopifyProduct {
  id              String   @id
  title           String?
  handle          String?
  status          String?
  cursor          String?
  description     String?
  descriptionHtml String?
  vendor          String?
  productType     String?
  tags            String[] @default([])

  images     Image[]
  variants   Variant[]
  metafields Metafield[]

  // Optional structured data captured from ProductDetail
  productOptions Json?
}

model Image {
  id      String  @id @default(cuid())
  src     String?
  altText String?
  width   Int?
  height  Int?

  ShopifyProduct   ShopifyProduct? @relation(fields: [shopifyProductId], references: [id], onDelete: Cascade)
  shopifyProductId String?
}

model Variant {
  id               String          @id @unique
  title            String?
  sku              String?
  price            String?
  compareAtPrice   String?
  barcode          String?
  weight           Float?
  weightUnit       String?
  imageSrc         String?
  selectedOptions  Json?
  ShopifyProduct   ShopifyProduct? @relation(fields: [shopifyProductId], references: [id], onDelete: Cascade)
  shopifyProductId String?
}

model Metafield {
  id               String          @id
  namespace        String
  key              String
  type             String?
  value            String?
  ShopifyProduct   ShopifyProduct? @relation(fields: [shopifyProductId], references: [id], onDelete: Cascade)
  shopifyProductId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([shopifyProductId, namespace, key])
}

// Stores pagination checkpoints for long-running syncs
model ShopifySyncState {
  key       String   @id // e.g., "products"
  endCursor String?
  sortKey   String? // e.g., "ID" or "UPDATED_AT"
  reverse   Boolean? @default(false)
  updatedAt DateTime @updatedAt
}
